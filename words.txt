def run_test(test_number, expected_output, function_call):
    try:
        function_call()
        print(f"Test {test_number} Passed")
    except Exception as e:
        print(f"Test {test_number} Failed: {e}")

# Test 1: Basic word count without missing_count
def test_1():
    expected_output = "word: 7\nmy: 2\n"
    run_test(1, expected_output, lambda: word_count('words.txt', None, 'word', 'my'))

# Test 2: Word count with missing_count
def test_2():
    expected_output = "word: 7\nmy: 2\nother: 7\n"
    run_test(2, expected_output, lambda: word_count('words.txt', None, 'word', 'my', missing_count=True))

# Test 3: Writing output to a file without missing_count
def test_3():
    expected_output = "word: 7\nmy: 2\n"
    run_test(3, expected_output, lambda: word_count('words.txt', 'output_test3.txt', 'word', 'my'))

# Test 4: Writing output to a file with missing_count
def test_4():
    expected_output = "word: 7\nmy: 2\nother: 7\n"
    run_test(4, expected_output, lambda: word_count('words.txt', 'output_test4.txt', 'word', 'my', missing_count=True))

# Test 5: Exception test - file does not exist
def test_5():
    expected_error_message = "No such file or directory"
    try:
        word_count('nonexistent_file.txt', 'output_test5.txt', 'word', 'my')
        print("Test 5 Failed: No exception raised.")
    except Exception as e:
        if expected_error_message in str(e):
            print(f"Test 5 Passed")
        else:
            print(f"Test 5 Failed: Expected '{expected_error_message}' in the error message, but got '{e}'.")

# Run the tests
test_1()
test_2()
test_3()
test_4()
test_5()
